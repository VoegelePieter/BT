Sure, I can help with that. Below is a PHP script that does exactly what you've described:

```php
<?php
// Set the content type to application/xml
header('Content-type: application/xml');

// Function to convert an array to XML
function array_to_xml($data, &$xml_data) {
    foreach ($data as $key => $value) {
        if (is_array($value)) {
            if (is_numeric($key)) {
                $key = 'item'.$key; //dealing with numeric keys in array
            }
            $subnode = $xml_data->addChild($key);
            array_to_xml($value, $subnode);
        } else {
            $xml_data->addChild("$key", htmlspecialchars("$value"));
        }
     }
}

// Read JSON input from the request
$jsonInput = file_get_contents('php://input');

// Decode JSON input
$jsonData = json_decode($jsonInput, true);

// Check if JSON data is valid
if (json_last_error() === JSON_ERROR_NONE) {
    // Initialize the XML object
    $xml_data = new SimpleXMLElement('<?xml version="1.0"?><data></data>');

    // Convert array to XML
    array_to_xml($jsonData, $xml_data);

    // Output XML
    echo $xml_data->asXML();
} else {
    // Return error message if JSON is invalid
    echo '<error>Invalid JSON</error>';
}
?>
```

### How the Script Works:
1. **Set Content Type**: The script sets the content type of the response to `application/xml` to ensure that the receiving system understands the format.
2. **Array to XML Conversion**: It defines a function `array_to_xml` which recursively converts an array (decoded from the JSON input) into XML format.
3. **Read and Decode JSON**: The script reads the JSON payload from the request body using `php://input` and attempts to decode it into an associative array.
4. **Error Handling**: If the JSON is invalid (as checked by `json_last_error()`), the script responds with an XML-formatted error message.
5. **Generate and Return XML**: If the JSON is valid, it uses the `array_to_xml` function to convert the data to XML and then returns the XML string.

### Usage:
To use this script, you can send JSON data to this PHP script using a frontend AJAX call or any HTTP client like `curl`. The script will either return the converted XML or an error message in XML format depending on the validity of the JSON input.